dt_create_synthetic_check:
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  stage: deploy
  variables:
      GIT_STRATEGY: none
      FREQUENCY: 5
      TYPE: PRIVATE
      LOCATIONS: 1
      URL: detect
  script: |
    # Getting Synthetic Check Locations
    curl -s -H "Authorization: Api-Token ${DT_API_TOKEN}" -X GET "https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/synthetic/locations?type=${TYPE}" | jq . > locations.txt

    COUNTER=0
    LOC=""
    while [ $COUNTER -lt $LOCATIONS ]; do
      echo $COUNTER
      TL=$(cat locations.txt| jq -r ".locations[${COUNTER}] | .entityId")
      let COUNTER=COUNTER+1
      if [ $COUNTER -lt $LOCATIONS ]; then
        LOC=$LOC"\"${TL}\","
      else
        LOC=$LOC"\"${TL}\""
      fi
    done

    if [ "${URL}" == "detect" ]; then
      export HEALTHENDPOINT=$(helm get ${APPLICATION_SHORT_NAME}|grep readinessProbe -A2|tail -n 1|awk '{print $2}')    
      export INGRESSHOST=$(kubectl -n ${CI_ENVIRONMENT_NAME} get ingress/${APPLICATION_SHORT_NAME}|tail -1|awk {'print $3'})
      API="https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/synthetic"
      ENDPOINT="http://${INGRESSHOST}${HEALTHENDPOINT}"
    else
      ENDPOINT=$URL
    fi

    json_payload='
      {
      "frequencyMin": '${FREQUENCY}',
      "anomalyDetection": {
        "outageHandling": {
          "globalOutage": true,
          "localOutage": false,
          "localOutagePolicy": {
            "affectedLocations": 1,
            "consecutiveRuns": 3
          }
        },
        "loadingTimeThresholds": {
          "enabled": false,
          "thresholds": [
            {
              "type": "TOTAL",
              "valueMs": 10000
            }
          ]
        }
      },
      "type": "HTTP",
      "name": "'${CI_ENVIRONMENT_SLUG}' - '${APPLICATION_SHORT_NAME}' - Ping",
      "locations": [
        '${LOC}'
      ],
      "enabled": true,
      "script": {
        "version": "1.0",
        "requests": [
          {
            "description": "'${APPLICATION_SHORT_NAME}'",
            "url": "'${ENDPOINT}'",
            "method": "GET",
            "requestBody": "",
            "validation": {
              "rules": [
                {
                  "value": ">=400",
                  "passIfFound": false,
                  "type": "httpStatusesList"
                }
              ],
              "rulesChaining": "or"
            },            
            "configuration": {
              "acceptAnyCertificate": true,
              "followRedirects": true
            },            
            "preProcessingScript": "",
            "postProcessingScript": ""
          }
        ]
      },
      "tags": [
        "environment:'${CI_ENVIRONMENT_SLUG}'",
        "app:'${APPLICATION_SHORT_NAME}'",
        "keptn_stage:'${CI_ENVIRONMENT_SLUG}'",
        "keptn_project:'${APPLICATION_SHORT_NAME}'",
        "keptn_service:'${APPLICATION_SHORT_NAME}'"
      ],
    }
    '

    # Create a Syntetic
    echo $json_payload > syntetic.json  
    # Getting Syntetic Monitor by Tag
    entityId=$(curl -s -X GET "${API}/monitors?tag=keptn_service:${APPLICATION_SHORT_NAME}&tag=keptn_stage:${CI_ENVIRONMENT_SLUG}" -H "Authorization: Api-Token ${DT_API_TOKEN}" | jq -r .monitors[0].entityId)

    if [ "$entityId" == "null" ]; then
        echo "No Synthetic found, create a new one."
        curl -X POST "${API}/monitors" \
          -H "Authorization: Api-Token ${DT_API_TOKEN}" \
          -H 'Content-Type: application/json' \
          -d @syntetic.json  
    else
        echo "Synthetic found with ID ${entityId}, update Monitor"
        curl -X PUT "${API}/monitors/${entityId}" \
          -H "Authorization: Api-Token ${DT_API_TOKEN}" \
          -H 'Content-Type: application/json' \
          -d @syntetic.json   
    fi
