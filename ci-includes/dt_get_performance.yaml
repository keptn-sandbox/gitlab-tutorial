dt_performance:
  stage: verify
  image: registry.gitlab.com/checkelmann/cicd-tools:latest  
  variables:
      THRESHOLD: 10
  start_in: 10 minutes  
  when: delayed
  script: |
    entityId=$(curl -s -X GET "https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/entity/services?tag=environment:${CI_ENVIRONMENT_SLUG}&tag=app:${APPLICATION_SHORT_NAME}&relativeTime=5mins" -H "Authorization: Api-Token ${DT_API_TOKEN}" | jq .[].entityId)
    entityId=$(echo "$entityId" | sed -e 's/^"//' -e 's/"$//')
    timeTo=$(curl -s -H "Authorization: Api-Token ${DT_API_TOKEN}"  "https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/events?eventType=CUSTOM_DEPLOYMENT&entityId=${entityId}" | jq .events[0].startTime)
    timeFrom=$((timeTo - 10 * 60 * 1000))
    echo Last Deployment at $(date -d @$(echo "(${timeTo} + 500) / 1000" | bc)), getting timeseries from $(date -d @$(echo "(${timeFrom} + 500) / 1000" | bc))
    # Get Last 10 min
    curl -s -X GET \
          "https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/timeseries/com.dynatrace.builtin:service.responsetime?includeData=true&relativeTime=10mins&aggregationType=AVG&entity=${entityId}" \
          -H "Authorization: Api-Token ${DT_API_TOKEN}" | jq . > tafter.json
    # Get 10 min before last deployment event
    curl -s -X GET \
          "https://${DT_TENANT_ID}.live.dynatrace.com/api/v1/timeseries/com.dynatrace.builtin:service.responsetime?includeData=true&startTimestamp=${timeFrom}&endTimestamp=${timeTo}&aggregationType=AVG&entity=${entityId}" \
          -H "Authorization: Api-Token ${DT_API_TOKEN}" | jq . >tbefore.json

    cat tbefore.json | jq .dataResult.dataPoints.\"$entityId\" > before.json
    cat tafter.json | jq .dataResult.dataPoints.\"$entityId\" > after.json

    pct=$(python /compare.py)
    if [ $pct -ge 10 ]; then
        echo "Performance too slow with ${pct}%!"
        exit 1
    else
        echo "Performance OK with ${pct}%!"
    fi

    B4=$(cat tbefore.json)
    AFTER=$(cat tafter.json)

    export REPORT="<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Performance Report for ${APPLICATION_SHORT_NAME} - Job ${CI_JOB_ID}</title>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js'></script>\n
    </head><body>\n
    <p><canvas id=\"chart\"></canvas></p>\n
    <script>\n
    var txtB4 = \`${B4}\`;\n
    var txtAfter= \`${AFTER}\`;\n
    var objB4 = JSON.parse(txtB4);\n
    var objAfter = JSON.parse(txtAfter);\n
    var B4time = [];\n
    var B4val = [];\n
    var Afterval = [];\n
    for(var k in objB4.dataResult.dataPoints) {\n
      for(var x in objB4.dataResult.dataPoints[k]) {\n
        B4val.push(objB4.dataResult.dataPoints[k][x][1]);\n
    }};\n

    for(var k in objAfter.dataResult.dataPoints) {\n
      for(var x in objAfter.dataResult.dataPoints[k]) {\n
        Afterval.push(objAfter.dataResult.dataPoints[k][x][1]);\n
    }};\n

    new Chart(document.getElementById(\"chart\"), {\n
        type: 'bar',\n
        data: {\n
          labels: ['1','2','3','4','5','6','7','8','9','10'],\n
          datasets: [\n
            {\n
              label: 'Before Deployment',\n
              backgroundColor: '#3e95cd',\n
              data: B4val\n
            },\n
            {\n
              label: 'After Deployment',\n
              backgroundColor: '#8e5ea2',\n
              data: Afterval\n
            }\n		
          ]\n
        },\n
        options: {\n
          title: {\n
            display: true,\n
            text: 'Performance Report for ${APPLICATION_SHORT_NAME} - Job ${CI_JOB_ID}'\n
          }\n
        }\n
    });\n
    </script></body></html>"
    echo -e $REPORT > report.html

    python /sendslack.py "Performance Report for ${APPLICATION_SHORT_NAME}" --attachment $(pwd)/report.html