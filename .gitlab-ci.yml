#
# Dynatrace Demo CI/CD Pipeline
#

#################################################################
# Global Variables
#################################################################
#################################################################
# Include necessary Templates 
#################################################################
include:  
  - project: 'checkelmann/dynatrace-pipeline'
    ref: master
    file: '/ci-includes/dt_deploy-eks-oneagent.yml'
  - project: 'checkelmann/dynatrace-pipeline'
    ref: master
    file: '/ci-includes/dt_configure_tenant.yml'

stages:
  - aws-eks-provisioning
  - aws-eks-oneagent
  - configure-dynatrace
  - aws-eks-keptn
  - keptn-sli-service
  - configure-quality-stage

#keptn-test:
#  stage: keptn-test
#  image: registry.gitlab.com/checkelmann/cicd-tools:latest
#  environment:
#    name: test
#  variables:
#      GIT_STRATEGY: none
#  script:
    #- echo $KUBECONFIG
    #- cat $KUBECONFIG
    #- echo $KUBE_URL
    #- echo $KUBE_CA_PEM_FILE


#################################################################
# Provisioning Stage
#################################################################
create-aws-environment:
  stage: aws-eks-provisioning
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  variables:
      GIT_STRATEGY: none
  script: |
    curl -o cluster.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/cluster.yml
    curl -o helm-rbac.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/helm-rbac.yml
    curl -o eks-service-account.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/eks-service-account.yml
    curl -o dt_k8s_config.json https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/dt_k8s_config.json
    eksctl create cluster --config-file cluster.yml --kubeconfig aws.kubeconfig
    export KUBECONFIG=./aws.kubeconfig
    kubectl apply -f helm-rbac.yml
    kubectl apply -f eks-service-account.yml
    python /sendslack.py "Kubeconfig for Cluster" --attachment $(pwd)/aws.kubeconfig
    echo "Getting Secrets..."
    kubectl get secret $(kubectl get secrets|grep default|awk '{print $1}') -o jsonpath="{.data.ca\.crt}"|base64 -d > cert.pem
    export K8STOKEN=$(kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')|grep "token:"|awk '{print $2}')
    export K8SAPI=$(cat aws.kubeconfig|grep "server:"|awk '{print $2}')
    export K8S_NAME=$(yq r cluster.yml metadata.name)
    python /sendslack.py "API Url @${K8SAPI} with Token ${K8STOKEN}" 
    echo "Sending cert...."
    python /sendslack.py "Certificate" --attachment $(pwd)/cert.pem
    echo "Sending Config...."
    python /sendslack.py "Kubeconfig for Cluster" --attachment $(pwd)/aws.kubeconfig

    echo "Adding Cluster to Dynatrace"
    API="https://${DT_TENANT_ID}.live.dynatrace.com/api/config/v1/kubernetes/credentials"
    envsubst < dt_k8s_config.json > tmp.json
    curl -s -H "Authorization: Api-Token ${DT_API_TOKEN}" -H 'Content-Type: application/json' -X POST ${API} -d @tmp.json

    echo "Installing Helm"
    helm init --service-account tiller
    echo "Wait for tiller to be ready..."

    for i in $(seq 1 20);
    do
      helmready=$(kubectl get po -n kube-system|grep tiller|awk '{print $3}')
      echo $helmready
      if [ "$helmready" = "Running" ];
      then
        echo "Tiller is ready"
        break
      fi
      echo $i
      sleep 5
    done

    if [ "$helmready" != "Running" ];
    then
      echo "Helm installation failed!"
      exit 1
    fi
    kubectl logs $(kubectl get po -n kube-system|grep tiller|awk '{print $1}') -n kube-system
    sleep 10

    helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
    helm install incubator/aws-alb-ingress-controller --set autoDiscoverAwsRegion=true --set autoDiscoverAwsVpcID=true --set clusterName=dynatrace-demo
    python /gitlab.py
  when: manual

install-keptn:
  stage: aws-eks-keptn
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  environment:
    name: test
  variables:
      GIT_STRATEGY: none
  script: |
    curl -o cluster.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/cluster.yml    
    cluster_name=$(yq r cluster.yml metadata.name)
    cluster_region=$(yq r cluster.yml metadata.region)
    curl -o creds.json https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/keptn_creds.json
    curl -o bridge.yaml https://raw.githubusercontent.com/keptn-workshops/workshop-utils/0.5.1/scripts/expose-bridge/manifests/bridge.yaml
    sed -i -- s/CLUSTER_NAME_PLACEHOLDER/${cluster_name}/g creds.json
    sed -i -- s/AWS_REGION/${cluster_region}/g creds.json
    mkdir ~/.kube
    cp $KUBECONFIG ~/.kube/config    
    eksctl utils update-coredns --name=${cluster_name} --region=${cluster_region} --approve
    echo "Waiting for CoreDNS Update..."
    sleep 20
    keptn install --platform=eks -c=creds.json --keptn-version=bug/1154/eks-install|tee inst.out
    export ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name=${AWS_ROUTE53_DOMAIN}|jq ".HostedZones[0].Id"|grep -o -P '(?<=hostedzone/).*(?=")')
    export KEPTN_ENDPOINT=$(cat inst.out|grep "set for"|awk {'print $13'})
    aws route53 change-resource-record-sets --hosted-zone-id "${ZONE_ID}" --change-batch "{\"Changes\":[{\"Action\":\"CREATE\",\"ResourceRecordSet\":{\"Name\":\"*.${AWS_ROUTE53_DOMAIN}.\",\"Type\":\"CNAME\",\"TTL\":60,\"ResourceRecords\":[{\"Value\":\"${KEPTN_ENDPOINT}\"}]}}]}" --region us-east-1
    echo "Wait for DNS Record beeing updated"
    sleep 100
    echo y|keptn configure domain ${AWS_ROUTE53_DOMAIN} --keptn-version=release-0.6.0.beta
    echo "Configure GitLab CI/CD Variable"
    export KEPTN_API=$(head -1 ~/.keptn/.keptn)
    export KEPTN_TOKEN=$(tail -1 ~/.keptn/.keptn)

    # Create bridge    
    sed -i -- s/DOMAIN_PLACEHOLDER/${AWS_ROUTE53_DOMAIN}/g bridge.yaml
    kubectl apply -f bridge.yaml
    #POST /projects/:id/variables
    GL_API="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables"
    echo $KEPTN_API
    #echo $KEPTN_TOKEN
    curl -s --header "PRIVATE-TOKEN: ${GL_API_TOKEN}" $GL_API | jq .[]

    TOKEN_EXISTS=$(curl -s --header "PRIVATE-TOKEN: ${GL_API_TOKEN}" $GL_API | jq '.[] | select (.key=="KEPTN_TOKEN")')
    echo $TOKEN_EXISTS
    echo $GL_API

    if [ "$TOKEN_EXISTS" = "" ]; then
      noout=$(curl -s --request POST -H "PRIVATE-TOKEN: ${GL_API_TOKEN}" $GL_API --form "key=KEPTN_TOKEN" --form "value=${KEPTN_TOKEN}")
    else
      noout=$(curl -s --request PUT -H "PRIVATE-TOKEN: ${GL_API_TOKEN}" "${GL_API}/KEPTN_TOKEN" --form "value=${KEPTN_TOKEN}")
    fi

    KEPTN_API_EXISTS=$(curl -s --header "PRIVATE-TOKEN: ${GL_API_TOKEN}" $GL_API | jq '.[] | select (.key=="KEPTN_API")')
    if [ "$KEPTN_API_EXISTS" = "" ]; then
      noout=$(curl -s --request POST -H "PRIVATE-TOKEN: ${GL_API_TOKEN}" $GL_API --form "key=KEPTN_API" --form "value=${KEPTN_API}")
    else
      noout=$(curl -s --request PUT -H "PRIVATE-TOKEN: ${GL_API_TOKEN}" "${GL_API}/KEPTN_API" --form "value=${KEPTN_API}")
    fi    
  when: manual  

###############################################################################
# Configure keptn SLI Service
###############################################################################

keptn-sli-service:
  stage: keptn-sli-service
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  environment:
    name: test
  variables:
      GIT_STRATEGY: none
  script: |
    # Add Git and clone dynatrace-service repository
    cd ~
    apk add git
    git clone --branch 0.4.0 https://github.com/keptn-contrib/dynatrace-service --single-branch
    echo "Copy Kubeconfig to expected Keptn Location"
    mkdir ~/.kube
    cp $KUBECONFIG ~/.kube/config    
    # Export DT_TENANT_ID and TOKEN as expected Env Vars
    export DT_TENANT=$DT_TENANT_ID

    cd dynatrace-service/deploy/scripts
    echo "Creating credentials file with CI Variables"
    CREDS=./creds_dt.json
    cat ./creds_dt.sav | sed 's~DYNATRACE_TENANT_PLACEHOLDER~'"$DT_TENANT_ID"'~' | \
      sed 's~DYNATRACE_API_TOKEN~'"$DT_API_TOKEN"'~' | \
      sed 's~DYNATRACE_PAAS_TOKEN~'"$DT_PAAS_TOKEN"'~' >> $CREDS    

    echo "Running deployDynatraceCommon.sh"
    curl -o deployDynatraceCommon.sh https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/deployDynatraceCommon.sh
    bash ./deployDynatraceCommon.sh    
    cd ~
    echo "Install SLI Service..."
    mkdir sli-service
    curl -s -o sli-service/distributor.yaml https://raw.githubusercontent.com/keptn-contrib/dynatrace-sli-service/release-0.1.0/deploy/distributor.yaml
    curl -s -o sli-service/service.yaml https://raw.githubusercontent.com/keptn-contrib/dynatrace-sli-service/release-0.1.0/deploy/service.yaml
    kubectl apply -f sli-service/
  when: manual  

###############################################################################
# Configure keptn SLI Service
###############################################################################

configure-quality-stage:
  stage: configure-quality-stage
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  environment:
    name: test
  variables:
      GIT_STRATEGY: none
      APPLICATION_SHORT_NAME: sampleapp
  script: |
    echo "Copy Kubeconfig to expected Keptn Location"
    mkdir ~/.kube
    cp $KUBECONFIG ~/.kube/config    

    curl -o shipyard.yaml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/shipyard.yaml
    curl -o dynatrace_sli.yaml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/dynatrace_sli
    curl -o dynatrace_slo.yaml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/dynatrace_slo
    KEPTN_ENDPOINT=https://api.keptn.$(kubectl get cm keptn-domain -n keptn -ojsonpath={.data.app_domain})
    KEPTN_API_TOKEN=$(kubectl get secret keptn-api-token -n keptn -ojsonpath={.data.keptn-api-token} | base64 -d)
    keptn auth -a $KEPTN_API_TOKEN -e $KEPTN_ENDPOINT

    keptn create project $APPLICATION_SHORT_NAME --shipyard=./shipyard.yaml --git-user=$GITLAB_USER_LOGIN --git-token="${KEPTN_GL_TOKEN}" --git-remote-url=$KEPTN_GL_REPO
    keptn create service $APPLICATION_SHORT_NAME --project=$APPLICATION_SHORT_NAME

    echo "Configure lighthouse"
    cat << EOF > tmp.yaml
    apiVersion: v1
    data:
      sli-provider: dynatrace
    kind: ConfigMap
    metadata:
      name: lighthouse-config-${APPLICATION_SHORT_NAME}
      namespace: keptn
    EOF
    cat tmp.yaml
    kubectl apply -f tmp.yaml
    
    DT_TENANT="${DT_TENANT_ID}.live.dynatrace.com"
    
    cat << EOF > dynatrace_secret.yaml
    DT_TENANT: ${DT_TENANT}
    DT_API_TOKEN: ${DT_API_TOKEN}
    EOF

    cat dynatrace_secret.yaml
    
    echo "Checking for secrets..."
    kubectl get secret -n keptn -ojson|grep "dynatrace-credentials-${APPLICATION_SHORT_NAME}"

    SECRET=$(kubectl get secret -n keptn -ojson|grep "dynatrace-credentials-${APPLICATION_SHORT_NAME}")

    if [ "$SECRET" = "" ]; then
      echo "Creating new Secret"
      kubectl create secret generic dynatrace-credentials-$APPLICATION_SHORT_NAME -n "keptn" --from-file=dynatrace-credentials=dynatrace_secret.yaml
    else
      echo "Recreating Secret"
      kubectl delete secret dynatrace-credentials-$APPLICATION_SHORT_NAME -n "keptn"
      kubectl create secret generic dynatrace-credentials-$APPLICATION_SHORT_NAME -n "keptn" --from-file=dynatrace-credentials=dynatrace_secret.yaml
    fi

    kubectl apply -f dynatrace_sli.yaml
    keptn add-resource --project=$APPLICATION_SHORT_NAME --service=$APPLICATION_SHORT_NAME --stage=$CI_ENVIRONMENT_SLUG --resource=dynatrace_slo.yaml --resourceUri=slo.yaml
  when: manual  

dt_deploy-eks-oneagent:
  environment:
    name: test
  when: manual

dt_configure_tenant:
  environment:
    name: test
  when: manual