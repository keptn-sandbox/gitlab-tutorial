#
# Dynatrace Demo CI/CD Pipeline
#

#################################################################
# Global Variables
#################################################################
#################################################################
# Include necessary Templates 
#################################################################
include:  
  - project: 'checkelmann/dynatrace-pipeline'
    ref: master
    file: '/ci-includes/dt_deploy-eks-oneagent.yml'
#  - project: 'checkelmann/dynatrace-pipeline'
#    ref: master
#    file: '/ci-includes/dt_configure_tenant.yml'

stages:
  - aws-eks-provisioning
  - aws-eks-oneagent
  - aws-eks-keptn

#################################################################
# Provisioning Stage
#################################################################
create-aws-environment:
  stage: aws-eks-provisioning
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  variables:
      GIT_STRATEGY: none
  script: |
      curl -o cluster.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/cluster.yml
      curl -o helm-rbac.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/helm-rbac.yml
      curl -o eks-service-account.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/eks-service-account.yml
      eksctl create cluster --config-file cluster.yml --kubeconfig aws.kubeconfig
      export KUBECONFIG=./aws.kubeconfig
      kubectl apply -f helm-rbac.yml
      kubectl apply -f eks-service-account.yml
      helm init --service-account tiller
      
      echo "Wait for tiller to be ready..."
      for i in {1..25}
      do
        helmready=$(kubectl get po -n kube-system|grep tiller|awk '{print $3}')
        if [ "$helmready" = "Running" ];
        then
          echo "Tiller is ready"
          break
        fi
        sleep 2
      done
      if [ "$helmready" != "Running" ];
      then
        echo "Helm installation failed!"
        exit 1
      fi

      helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
      helm install incubator/aws-alb-ingress-controller --set autoDiscoverAwsRegion=true --set autoDiscoverAwsVpcID=true --set clusterName=dynatrace-demo
      kubectl get secret $(kubectl get secrets|grep default|awk '{print $1}') -o jsonpath="{['data']['ca\.crt']}" | base64 --decode > cert.pem
      K8STOKEN=$(kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')|grep "token:"|awk '{print $2}')
      K8SAPI=$(cat aws.kubeconfig|grep "server:"|awk '{print $2}')
      python /sendslack.py "API Url ${K8SAPI} with Tokem ${K8STOKEN}" --attachment $(pwd)/cert.pem
      python /sendslack.py "Kubeconfig for Cluster" --attachment $(pwd)/aws.kubeconfig
  when: manual

install-keptn:
  stage: aws-eks-keptn
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  environment:
    name: test
  variables:
      GIT_STRATEGY: none
  script: |
    curl -o cluster.yml https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/cluster.yml    
    cluster_name=$(yq r cluster.yml metadata.name)
    cluster_region=$(yq r cluster.yml metadata.region)
    curl -o creds.json https://gitlab.com/checkelmann/dynatrace-pipeline/raw/master/assets/keptn_creds.json
    sed -i -- s/CLUSTER_NAME_PLACEHOLDER/${cluster_name}/g creds.json
    sed -i -- s/AWS_REGION/${cluster_region}/g creds.json
    eksctl utils update-coredns --name=${cluster_name} --region=${cluster_region} --approve
    keptn install --platform=eks -c=creds.json --keptn-version=0.5.2
  when: manual  

dt_deploy-eks-oneagent:
  environment:
    name: test
  when: manual

#deploy_oneagent:
#  stage: configure-dynatrace
#  extends: .dt_deploy-eks-oneagent
#  environment:
#    name: test
#  when: manual