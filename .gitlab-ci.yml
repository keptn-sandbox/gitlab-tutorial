#
# Dynatrace Demo CI/CD Pipeline
#

#################################################################
# Global Variables
#################################################################
variables:
  APPLICATION_NAME: sample-app
  APPLICATION_SHORT_NAME: sampleapp

include: 
  - local: 'ci-includes/dt_create_deployment_event.yaml'
  # - local: 'ci-includes/dt_create_synthetic_check.yaml'
  - local: 'ci-includes/dt_get_problems.yaml'
  #- local: 'ci-includes/dt_get_performance.yaml'
  - local: 'ci-includes/keptn_evaluation.yaml'
  - local: 'ci-includes/dt_jmeter_loadtest.yaml'
  - local: 'ci-includes/dt_create_keptn_qualitygate.yaml'
  - local: 'ci-includes/dt_create_alerting.yaml'

stages:
  - build
  - deploy
  - test
  - verify
  - chatops
#  - rollout

#################################################################
# Build Stage
#################################################################
docker-build-master:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - tags

#################################################################
# Deploy Stage
#################################################################

# Create/Update keptn Qualitygate.
# Included from 'ci-includes/dt_create_keptn_qualitygate.yaml'
create-keptn-qualitygate:
  environment:
    name: test
  only:
    - tags  

# Deploy app and send sh.keptn.events.deployment-finished Event
deploy-application:
  image: registry.gitlab.com/checkelmann/cicd-tools:latest
  stage: deploy
  environment:
    name: test
  variables:
    GIT_STRATEGY: fetch
  script: |
    helm upgrade --install --wait \
      --set ci_environment_slug=${CI_ENVIRONMENT_SLUG} \
      --set ci_project_path_slug=${CI_PROJECT_PATH_SLUG} \
      --namespace=${CI_ENVIRONMENT_SLUG} ${APPLICATION_SHORT_NAME} ./chart/

    export HEALTHENDPOINT=$(helm get ${APPLICATION_SHORT_NAME}|grep readinessProbe -A2|tail -n 1|awk '{print $2}')    
    export INGRESSHOST=$(kubectl -n ${CI_ENVIRONMENT_NAME} get ingress/${APPLICATION_SHORT_NAME}|tail -1|awk {'print $3'})    
    export ENDPOINT="http://${INGRESSHOST}${HEALTHENDPOINT}"
    export UUID=$(uuidgen)

    deployment_finished_event='
      {
        "type": "sh.keptn.events.deployment-finished",
        "contenttype": "application/json",
        "specversion": "0.2",
        "source": "'${CI_PROJECT_PATH_SLUG}'",
        "id": "'${UUID}'",
        "data": {
          "project": "'${APPLICATION_SHORT_NAME}'",
          "stage": "'${CI_ENVIRONMENT_SLUG}'",
          "service": "'${APPLICATION_SHORT_NAME}'",
          "deploymentStrategy": "direct",
          "tag": "'${CI_COMMIT_TAG}'",
          "image": "'${CI_REGISTRY_IMAGE}'",
          "labels": {
            "testid": "'${CI_JOB_ID}'",
            "buildnr": "'${CI_JOB_ID}'",
            "runby": "'${CI_DEPLOY_USER}'",
            "SyntheticManuallyAssignedApp": "APPLICATION-EA7C4B59F27D43EB",
            "SyntheticFrequency": "5"
          },
          "deploymentURILocal": "'${ENDPOINT}'",
          "deploymentURIPublic":  "'${ENDPOINT}'"
        }
      }
    '
    echo $deployment_finished_event > deployment-finish.event
    
    # Log into keptn    
    KEPTN_DOMAIN=$(kubectl get cm keptn-domain -n keptn -ojsonpath={.data.app_domain})
    KEPTN_ENDPOINT=https://api.keptn.${KEPTN_DOMAIN}
    KEPTN_API_TOKEN=$(kubectl get secret keptn-api-token -n keptn -ojsonpath={.data.keptn-api-token} | base64 -d)
    keptn auth -a $KEPTN_API_TOKEN -e $KEPTN_ENDPOINT
    keptn send event -f deployment-finish.event
  only:
    - tags  

# Send deployment event to dynatrace
# Will be obsolete when the keptn dynatrace-service could pass additional
# deployment informations like CI Backlink to Dynatrace
# Included from 'ci-includes/dt_create_deployment_event.yaml'
dt_create_deployment_event:
  environment:
    name: test
  only:
    - tags

# Create an additional alerting in Dynatrace
# to send alerts to the GitLab ServiceDesk
# Included from 'ci-includes/dt_create_alerting.yaml'
dt_create_alerting:
  environment:
    name: test
  only:
    - tags

# Run Load Test if not using the keptn-jmeter service
# Included from 'ci-includes/dt_jmeter_loadtest.yaml'
generate-load:    
  environment:
    name: test
  only:
    - tags  

# Run the keptn Evaluation
# Included from 'ci-includes/keptn_evaluation.yaml'
keptn_evaluation:
  environment:
    name: test
  start_in: 5 minutes  
  when: delayed    
  only:
    - tags    

# Query Dynatrace API for detected Problems by Davis
# Included from 'ci-includes/dt_get_problems.yaml'
dt_get_problems:
  environment:
    name: test
  start_in: 5 minutes  
  when: delayed    
  only:
    - tags  


###############################################################
# OLD JOBS WHICH ARE NOW HANDLED BY KEPTN
###############################################################
#dt_performance:
#  only:
#    - tags
  #needs: ["dt_create_deployment_event"]

#dt_create_synthetic_check:
#  variables:
#    TYPE: PRIVATE
#    LOCATIONS: 1
#    FREQUENCY: 1
#  environment:
#    name: test
#  only:
#    - tags  

deploy-to-prod:
  stage: chatops
  only: [chat, tags]
  when: manual
  script:
    - echo "ChatOps Stage - Deploy to Prod"    

#rollout-to-prod:
#  stage: rollout
#  only: [tags]
#  needs: ["deploy-to-prod"]
#  script:
#    - echo "Rolling out to Production"